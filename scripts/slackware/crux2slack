#!/bin/bash

# Universal Slackware Package Builder

# Define the STARTDIR (where Pkgfile is located)
STARTDIR="$(pwd)"

# Check for the Pkgfile
if [ ! -f "$STARTDIR/Pkgfile" ]; then
    echo "Error: Pkgfile not found in the current directory."
    exit 1
fi

SRC="$STARTDIR/SRC"
PKG="${STARTDIR}/PKG"
OUTPUT="${STARTDIR}/OUTPUT"
mkdir -p "$SRC" "$PKG" "$OUTPUT"
fn_replace_in_pkgfile_configure() {
    sed -i 's|./configure|./configure --build=x86_64-slackware-linux --host=x86_64-slackware-linux|' "$1"
}
fn_restore_in_pkgfile_configure() {
    sed -i 's|./configure --build=x86_64-slackware-linux --host=x86_64-slackware-linux|./configure|' "$1"
}

echo "Cleaning up..."
rm -rf "$PKG"
rm -rf "$SRC"/*
fn_replace_in_pkgfile_configure "$STARTDIR/Pkgfile"
source "$STARTDIR/Pkgfile"
description=$(head -1 Pkgfile | sed 's/# Description: //g')

# Handle files listed in the source array
echo "Checking source files..."
for src in "${source[@]}"; do
    if [ -f "$STARTDIR/$src" ]; then
        echo "Copying $src to SRC directory..."
        cp "$STARTDIR/$src" "$SRC/"
    fi
done

# Handle downloading and extracting source files (only archives)
echo "Downloading and extracting source..."
for url in "${source[@]}"; do
    file=$(basename "$url")
    if [[ "$file" =~ \.tar\.gz$ || "$file" =~ \.tar\.xz$ || "$file" =~ \.tar\.bz2$ ]]; then
        if [ ! -f "$SRC/$file" ]; then
            wget -q "$url" -P "$SRC"
        fi
        tar -xf "$SRC/$file" -C "$SRC" || { echo "Error: Failed to extract $file"; exit 1; }
    fi
done

# Run the build function starting from SRC
echo "Running the build function in $SRC..."
cd "$SRC" || exit 1
build || { echo "Error: Build function failed."; fn_restore_in_pkgfile_configure "$STARTDIR/Pkgfile" && exit 1; }

# Organize for Slackware
echo "Organizing files for Slackware package..."
mkdir -p "$PKG/install"
cat <<EOF >"$PKG/install/slack-desc"
# HOW TO EDIT THIS FILE:
# See "man 5 slack-desc" for details.
#
# Package: $name
# Version: $version
# Summary: $description
#
$name: 
$name: Built from universal Pkgfile for Slackware.
$name:
EOF

# Clean package
for dir in "$PKG"/bin "$PKG"/sbin "$PKG"/usr/bin "$PKG"/usr/sbin; do
    if [ -d $dir ]; then
        find $dir -type f -exec strip '{}' > /dev/null 2>&1 \;
    fi
done
find "$PKG" -name "*.so*" -exec strip --strip-unneeded '{}' > /dev/null 2>&1 \;
find "$PKG" -name "*.a" -exec strip -g '{}' > /dev/null 2>&1 \;
find "$PKG" -type f -name "*.pyc" -delete
find "$PKG" -type f -name "*.pyo" -delete
if [ -d "$PKG"/usr/doc ]; then rm -rf "$PKG"/usr/doc; fi
if [ -d "$PKG"/usr/man ]; then rm -rf "$PKG"/usr/man; fi
if [ -d "$PKG"/usr/share/doc ]; then rm -rf "$PKG"/usr/share/doc; fi
if [ -d "$PKG"/usr/share/gtk-doc ]; then rm -rf "$PKG"/usr/share/gtk-doc; fi
if [ -d "$PKG"/usr/share/man ]; then rm -rf "$PKG"/usr/share/man; fi
if [ -d "$PKG"/usr/share/info ]; then rm -rf "$PKG"/usr/share/info; fi
if [ -d "$PKG"/usr/share/gnome/help ]; then rm -rf "$PKG"/usr/share/gnome/help; fi
if [ -d "$PKG"/usr/share/help ]; then rm -rf "$PKG"/usr/share/help; fi
if [ -f "$PKG"/usr/lib/locale ]; then rm -rf "$PKG"/usr/lib/locale; fi

# Create Slackware package
echo "Creating Slackware package..."
ARCH=$(uname -m)
PACKAGE_NAME="${name}-${version}-${ARCH}-${release}.txz"
cd "$PKG" || exit 1
makepkg -l y -c n "${OUTPUT}/${PACKAGE_NAME}" || {
    echo "Error: Failed to create Slackware package."
    exit 1
}

echo "Slackware package created: ${OUTPUT}/${PACKAGE_NAME}"
#restore Pkgfile
fn_restore_in_pkgfile_configure "$STARTDIR/Pkgfile"
