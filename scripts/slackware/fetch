#!/bin/bash
# 
# Author: simargl <https://github.com/simargl>
# License: GPL v3

# Define colors and variables
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'
RESET='\033[0m'
DBPATH="/var/lib/slackware"
CACHEDIR="/var/cache/slackware"
REPOSITORY=('https://quantum-mirror.hu/mirrors/pub/slackware/slackware64-current/patches'
            'https://quantum-mirror.hu/mirrors/pub/slackware/slackware64-current/slackware64'
            'https://github.com/simargl/slik-linux/releases/download/slackware-current')

# Root check      
if [[ $EUID -ne 0 ]]; then
    printf "${RED}Error: This script must be run as root${RESET}\n"
    exit 1
fi

# Download file with wget ($1=filename; $2=target directory; $3=comment)
fn_download_file() {
    printf "${YELLOW}>>> ${CYAN}Downloading ${GREEN}%s${RESET}" "$3"
    wget -q -nv --no-check-certificate "$1" -P "$2" &
    pid=$!
    while kill -0 $pid >/dev/null 2>&1; do
        printf "."
        sleep 0.5
    done
    wait $pid
    printf "${YELLOW} DONE${RESET}\n"
}

fn_repo_update() {
    [ -f "$DBPATH/packages.db" ] && rm "$DBPATH/packages.db"
    printf "Synchronizing package databases...\n"
    for ((i=0; i<${#REPOSITORY[@]}; ++i)); do
        fn_download_file "${REPOSITORY[i]}/CHECKSUMS.md5" "$DBPATH" "${REPOSITORY[i]}"
        cd "$DBPATH" || exit
        grep -E '\.tgz$|\.txz$' CHECKSUMS.md5 | cut -c 36- | sed "s|^|${REPOSITORY[i]}|g" | sort | while IFS= read -r line; do
            extract_package_info "$line" >> "$DBPATH/packages.db"
        done
        rm CHECKSUMS.md5*
    done
    printf "Repositories: %d Packages: %d\n" "${#REPOSITORY[@]}" "$(($(wc -l < "$DBPATH/packages.db") - 1))"
}

extract_package_info() {
    local url="$1"
    nv=$(basename "$url" | sed 's/\(.*\)-[^-]*-[^-]*$/\1/')
    n="$(echo "$nv" | sed 's/-[^-]*$//')"
    v="$(echo "$nv" | sed 's/.*-//')"
    r="$(echo ${url##*-} | sed 's/.t.z//')"
    echo "$n|$v|$r|$url"
}

fn_pkg_search() {
    if [[ $ARG ]]; then
        PKGSEARCH=$(grep "$ARG" "$DBPATH/packages.db")
        if [[ "$PKGSEARCH" != "" ]]; then
            while read -r result; do
                pkgnameR="$(echo "$result" | cut -d '|' -f1)"
                pkgverR="$(echo "$result" | cut -d '|' -f2)"
                pkgrelR="$(echo "$result" | cut -d '|' -f3)"
                I="Not installed"
                if [ -f "$DBPATH/installed/$pkgnameR/pkginfo" ]; then 
                    source "$DBPATH/installed/$pkgnameR/pkginfo"
                    if [ "$pkgverR-$pkgrelR" == "$pkgver-$pkgrel" ]; then I="Installed"; else I="Old ($pkgver-$pkgrel)"; fi
                fi
                printf "%-32s%-30s%s\n" "$pkgnameR" "($pkgverR-$pkgrelR)" "$I"
            done <<< "$PKGSEARCH"
        fi
    fi
}

fn_get_pkgmatch() {
    grep "$1|" "$DBPATH/packages.db" | head -1
}

fn_check_pkgmatch_exists() {
    unset MISSING
    LIST="$@"
    for ONE in $LIST; do  
        PKGMATCH="$(fn_get_pkgmatch $ONE)"
        if [[ $PKGMATCH == "" ]]; then
            MISSING+=("$ONE"); 
        fi
    done
    if [[ ${#MISSING[@]} != 0 ]]; then
        for i in "${MISSING[@]}"; do
            printf "${RED}Error: Unable to locate package %s${RESET}\n" "$i"
        done
        exit 1
    fi
}

fn_pkg_download() {
    if [ $ARG ]; then
        PKGMATCH=$(fn_get_pkgmatch "$ARG")
        if [[ "$PKGMATCH" != "" ]]; then
            URL=$(echo $PKGMATCH | cut -d '|' -f4)
            FILE=$(basename $URL)
            if [ ! -f "$FILE" ]; then
                fn_download_file "$URL" "$CACHEDIR" "$FILE"
            fi
            if [ ! -f "$CACHEDIR/$(basename "$PKGMATCH")" ]; then
                printf "${RED}%s download failed${RESET}\n" "$(basename "$PKGMATCH")"
                exit 1
            fi
        else
            printf "${RED}Error: Unable to locate package %s${RESET}\n" "$ARG"
        fi
    fi
}

fn_pkg_download_all() {
    fn_check_pkgmatch_exists $ARGD
    for ONE in $ARGD; do
        ARG="$ONE"
        fn_pkg_download
    done
}

fn_write_metadata() {
    nv=$(echo $1 | sed 's/\(.*\)-[^-]*-[^-]*$/\1/')
    pkgname="$(echo $nv | sed 's/-[^-]*$//')"
    pkgver="$(echo $nv | sed 's/.*-//')"
    pkgrel="$(echo ${1##*-} | sed 's/.t.z//')"
    mkdir -p $2/$DBPATH/installed/$pkgname
    echo pkgname="$pkgname" > $2/$DBPATH/installed/$pkgname/pkginfo
    echo pkgver="$pkgver" >> $2/$DBPATH/installed/$pkgname/pkginfo
    echo pkgrel="$pkgrel" >> $2/$DBPATH/installed/$pkgname/pkginfo
    # files
    tar -tvf $1 | awk '!/^d/ {print $NF}' | grep -v "install/" | sed 's/^/\//' > $2/$DBPATH/installed/$pkgname/files
}

fn_pkg_extract() {
    if [[ "$ARG" != "" && -f "$ARG" ]]; then
        printf "Extracting ${CYAN}%s${RESET}\n" "$ARG"
        tar -xf "$ARG"
    else
        printf "${RED}Extraction failed: File not found or invalid.${RESET}\n"
        exit 1
    fi
}

fn_pkg_extract_all() {
    for i in *.t?z; do
        [[ -e "$i" ]] || break
        ARG="$i"
        printf "Installing ${CYAN}%s${RESET} --target-root=./install\n" "$ARG"
        [ ! -d install ] && mkdir install
        tar -xf "$ARG" -C install
        if [ -f "install/install/doinst.sh" ]; then
            cd install && sh ./install/doinst.sh 2>/dev/null
            cd "$OLDPWD" || exit
        fi
        fn_write_metadata "$ARG" install
        if [ -d install/install ]; then
            rm -r install/install
        fi
    done
}

fn_pkg_post_actions() {
    local ICONS
    local DESKTOP
    local GSETTINGS
    local FONTS

    ICONS=$(grep /usr/share/icons/hicolor "$DBPATH/installed/$pkgname/files" || true)
    DESKTOP=$(grep /usr/share/applications "$DBPATH/installed/$pkgname/files" || true)
    GSETTINGS=$(grep /usr/share/glib-2.0/schemas "$DBPATH/installed/$pkgname/files" || true)
    FONTS=$(grep /usr/share/fonts/TTF "$DBPATH/installed/$pkgname/files" || true)

    local file_paths=("$ICONS" "$DESKTOP" "$GSETTINGS" "$FONTS")

    for file_path in "${file_paths[@]}"; do
        if [ "$file_path" ]; then
            case "$file_path" in
                "$ICONS")
                    printf "Updating icon cache...\n"
                    gtk-update-icon-cache /usr/share/icons/hicolor
                    ;;
                "$DESKTOP")
                    printf "Updating desktop database...\n"
                    update-desktop-database
                    ;;
                "$GSETTINGS")
                    printf "Compiling GSettings schemas...\n"
                    glib-compile-schemas /usr/share/glib-2.0/schemas
                    ;;
                "$FONTS")
                    printf "Updating font cache and directories...\n"
                    fc-cache -f -s
                    mkfontscale /usr/share/fonts/TTF
                    mkfontdir /usr/share/fonts/TTF
                    ;;
            esac
        fi
    done
}

fn_run_install_script() {
    if [ -f "$1" ]; then
        cd / && sh "$1" 2>/dev/null
        cd "$OLDPWD"
    fi
}

fn_cleanup_install_directory() {
    if [ -d /install ]; then
        rm -r /install
    fi
}

fn_pkg_install_local() {
    if [[ "$ARG" != "" && -f "$ARG" ]]; then
        printf "Installing ${CYAN}%s${RESET}\n" "$ARG"
        tar -xf "$ARG" -C /
        fn_run_install_script "/install/doinst.sh"
        fn_write_metadata "$ARG" /
        fn_cleanup_install_directory
        fn_pkg_post_actions
    else
        printf "${RED}Installation failed: File not found or invalid.${RESET}\n"
        exit 1
    fi
}

fn_pkg_install() {
    LOCAL="false"
    for ONE in $ARGI; do
        if [ -f "$ONE" ]; then
            LOCAL="true"
            ARG="$ONE"
            fn_pkg_install_local
        fi
    done
    if [ "$LOCAL" = true ]; then exit 0; fi
    fn_check_pkgmatch_exists "$ARGI"
    for ONE in $ARGI; do
        ARG="$ONE"
        if [ -d "$DBPATH/installed/$ARG" ]; then
            printf "${RED}%s is already installed${RESET}\n" "$ARG" && exit 1
        fi
    done
    ARGD="$ARGI"
    fn_pkg_download_all
    for ONE in $ARGI; do
        ARG="$ONE"
        PKGMATCH="$(fn_get_pkgmatch "$ARG")"
        URL=$(echo $PKGMATCH | cut -d '|' -f4)
        FILE=$(basename $URL)
        if [ -f "$CACHEDIR/$FILE" ]; then
            ARG="$FILE"
            cd "$CACHEDIR" && fn_pkg_install_local && cd "$OLDPWD"
        fi
    done
}

fn_pkg_remove() {
    for i in $ARGR; do
        if [ -f "$DBPATH/installed/$i/pkginfo" ]; then
            source "$DBPATH/installed/$i/pkginfo"
            printf "Removing ${CYAN}%s${RESET}\n" "$i"
            cat "$DBPATH/installed/$i/files" | while read -r file; do 
                if [ -f "$file" ]; then 
                    rm "$file"
                fi
            done
            fn_pkg_post_actions
            rm -r "$DBPATH/installed/$i"
        else
            printf "${RED}%s is not installed${RESET}\n" "$i"
        fi
    done
}

fn_pkg_clean_cache() {
    rm $CACHEDIR/* 2>/dev/null
}

fn_pkg_show_help() {
    printf "Usage: %s <command> [arguments]\n\n" "$(basename "$0")"
    printf "where ${CYAN}<command>${RESET} is one of:\n"
    printf "    ${GREEN}%-2s${RESET} ${YELLOW}%-42s${RESET} %s\n" "up:" "Update repository database"
    printf "    ${GREEN}%-2s${RESET} ${YELLOW}%-42s${RESET} %s\n" "sr:" "Search for packages"
    printf "    ${GREEN}%-2s${RESET} ${YELLOW}%-42s${RESET} %s\n" "dl:" "Download package(s)"
    printf "    ${GREEN}%-2s${RESET} ${YELLOW}%-42s${RESET} %s\n" "xp:" "Extract a single package (specify filename)"
    printf "    ${GREEN}%-2s${RESET} ${YELLOW}%-42s${RESET} %s\n" "xa:" "Extract all packages from the current directory"
    printf "    ${GREEN}%-2s${RESET} ${YELLOW}%-42s${RESET} %s\n" "it:" "Install package(s) (local or from a repository)"
    printf "    ${GREEN}%-2s${RESET} ${YELLOW}%-42s${RESET} %s\n" "rm:" "Uninstall package(s)"
    printf "    ${GREEN}%-2s${RESET} ${YELLOW}%-42s${RESET} %s\n\n" "cc:" "Delete cached packages"
}

# Arguments
case "$1" in
    up) fn_repo_update ;;
    sr) ARG="$2"; fn_pkg_search ;;
    dl) shift; ARGD="$@"; fn_pkg_download_all ;;
    xp) ARG="$2"; fn_pkg_extract ;;
    xa) fn_pkg_extract_all ;;
    it) shift; ARGI="$@"; fn_pkg_install ;;
    rm) shift; ARGR="$@"; fn_pkg_remove ;;
    cc) fn_pkg_clean_cache ;;
    *) fn_pkg_show_help ;;
esac
