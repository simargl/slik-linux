name: CI Repo-pkgs

on:
  schedule:
    - cron: '5 1 */2 * *'
  workflow_dispatch: 

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: sudo apt-get update; sudo ln -sf /bin/bash /bin/sh

    - name: Create rootfs
      run: |
        sudo sed '$s/fn_compress_rootfs/#fn_compress_rootfs/' -i 2slackware2sb
        sudo sh 2slackware2sb

    - name: Compile packages
      run: |
        sudo mount -t proc proc /tmp/root.x86_64/proc
        sudo mount -t sysfs sys /tmp/root.x86_64/sys
        sudo mount -o bind /dev /tmp/root.x86_64/dev
        sudo cp -a scripts/slackware/repo/create_packages.sh /tmp/root.x86_64/
        sudo cp -a scripts/slackware/repo/SlackBuilds /tmp/root.x86_64/
        sudo chroot /tmp/root.x86_64/ /bin/bash -c "sh create_packages.sh"
        sudo chroot /tmp/root.x86_64/ /bin/bash -c "mkdir /tmp/slackware"
        sudo chroot /tmp/root.x86_64/ /bin/bash -c "mv /tmp/*.t?z /tmp/slackware"
        sudo cp -a scripts/slackware/repo/gen_repos_files.sh /tmp/root.x86_64/tmp/
        sudo cp -a scripts/slackware/repo/genreprc /tmp/root.x86_64/tmp/
        sudo chroot /tmp/root.x86_64/ /bin/bash -c "cd /tmp; echo|yes|bash gen_repos_files.sh"
        sudo umount /tmp/root.x86_64/{proc,sys,dev}

    - name: Remove old release assets
      id: cleanup
      uses: actions/github-script@v6
      with:
        script: |
          const { Octokit } = require("@octokit/core");
          const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
          
          const { data: releases } = await octokit.request('GET /repos/{owner}/{repo}/releases', {
            owner: context.repo.owner,
            repo: context.repo.repo
          });

          const release = releases.find(release => release.tag_name === 'slackware-current');
          
          if (release) {
            for (const asset of release.assets) {
              await octokit.request('DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}', {
                owner: context.repo.owner,
                repo: context.repo.repo,
                asset_id: asset.id
              });
            }
          }

          return release ? release.id : null;
        result-encoding: string

    - name: Upload new release assets
      if: steps.cleanup.outputs.result != 'null'
      uses: actions/github-script@v6
      with:
        script: |
          const { Octokit } = require("@octokit/core");
          const fs = require('fs');
          const path = require('path');
          const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });

          const release_id = ${{ steps.cleanup.outputs.result }};
          const dir = '/tmp/root.x86_64/tmp/slackware/';
          const files = fs.readdirSync(dir);

          for (const file of files) {
            const filePath = path.join(dir, file);
            const content = fs.readFileSync(filePath);

            await octokit.request('POST /repos/{owner}/{repo}/releases/{release_id}/assets', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release_id,
              name: file,
              data: content,
              headers: {
                'content-type': 'application/gzip',
                'content-length': content.length
              }
            });
          }
