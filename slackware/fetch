#!/bin/bash
# 
# Author: simargl <https://github.com/simargl>
# License: GPL v3

# Variables
# Define colors
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'
RESET='\033[0m'
ARCH="x86_64"
DBPATH="/var/lib/slackware"
CACHEDIR="/var/cache/slackware"
REPOSITORY=('https://lon.mirror.rackspace.com/slackware/slackware64-current/patches'
            'https://lon.mirror.rackspace.com/slackware/slackware64-current/slackware64'
            'https://github.com/simargl/slik-linux/releases/download/slackware-current')
# root check      
if [[ $EUID -ne 0 ]]; then echo "This script must be run as root" && exit 1; fi

# download file with wget ($1=filename; $2=target directory; $3=comment)
fn_download_file() {
    printf "${YELLOW}>>> ${CYAN}Downloading ${GREEN}%s${RESET}" "$3"
    wget -q -nv --no-check-certificate "$1" -P "$2" &
    pid=$!
    while kill -0 $pid >/dev/null 2>&1; do
        printf "."
        sleep 0.5
    done
    wait $pid
    printf "${YELLOW} DONE${RESET}\n"
}

fn_repo_update() {
    [ -f $DBPATH/packages.list ] && rm $DBPATH/packages.list
    echo -e "Synchronizing package databases..."
    for ((i=0; i<${#REPOSITORY[@]}; ++i)); do
        fn_download_file ${REPOSITORY[i]}/CHECKSUMS.md5 $DBPATH ${REPOSITORY[i]}
        cd $DBPATH || exit
        grep -E '\.tgz$|\.txz$' CHECKSUMS.md5 | cut -c 36- | sed "s|^|${REPOSITORY[i]}|g" | sort >> packages.list
        rm CHECKSUMS.md5
    done
    echo "Repositories: ""${#REPOSITORY[@]}""  Packages: ""$(grep -c ^ packages.list)"
}

fn_pkg_search() {
    if [[ $ARG && ${#ARG} -gt 0 ]]; then
        PKGSEARCH=$(grep "$ARG" "$DBPATH/packages.list")
        if [[ "$PKGSEARCH" != "" ]]; then
            while read -r result; do
                nv=$(basename "$result" | sed 's/\(.*\)-[^-]*-[^-]*$/\1/')
                pkgnameR="$(echo "$nv" | sed 's/-[^-]*$//')"
                pkgverR="$(echo "$nv" | sed 's/.*-//')"
                I="Not installed"
                if [ -d "$DBPATH/installed/$pkgnameR" ]; then 
                    . "$DBPATH/installed/$pkgnameR/pkginfo"
                    if [ "$pkgverR" == "$pkgver" ]; then I="Installed"; else I="Outdated ($pkgver)"; fi
                fi
                printf "%-32s%-28s%s\n" "$pkgnameR" "($pkgverR)" "$I"
            done <<< "$PKGSEARCH"
        fi
    fi
}

fn_get_pkgmatch() {
    grep /$1-[0-9] $DBPATH/packages.list | head -1
}

fn_check_pkgmatch_exists() {
    unset MISSING
    LIST="$@"
    for ONE in $LIST; do  
        PKGMATCH="$(fn_get_pkgmatch $ONE)"
        if [[ $PKGMATCH == "" ]]; then
            MISSING+=("$ONE"); 
        fi
    done
    if [[ ${#MISSING[@]} != 0 ]]; then
        for i in "${MISSING[@]}"; do
            printf "${RED}E: Unable to locate package %s${RESET}\n" "$i"
        done
        exit 1
    fi
}

fn_pkg_download() {
    if [ $ARG ]; then
        PKGMATCH=$(fn_get_pkgmatch "$ARG")
        if [[ "$PKGMATCH" != "" ]]; then
            if [ ! -f "$CACHEDIR/$(basename "$PKGMATCH")" ]; then
                fn_download_file "$PKGMATCH" "$CACHEDIR" "$(basename "$PKGMATCH")"
            else
                printf "Using cached ${CYAN}%s${RESET}\n" "$(basename "$PKGMATCH")"
            fi
            if [ ! -f "$CACHEDIR/$(basename "$PKGMATCH")" ]; then
                printf "${RED}%s download failed${RESET}\n" "$(basename "$PKGMATCH")"
                exit 1
            fi
        else
            printf "${RED}E: Unable to locate package %s${RESET}\n" "$ARG"
        fi
    fi
}

fn_pkg_download_all() {
    fn_check_pkgmatch_exists $ARGD
    for ONE in $ARGD; do
        ARG="$ONE"
        fn_pkg_download
    done
}

fn_get_metadata() {
    nv=$(echo $1 | sed 's/\(.*\)-[^-]*-[^-]*$/\1/')
    pkgname="$(echo $nv | sed 's/-[^-]*$//')"
    pkgver="$(echo $nv | sed 's/.*-//')"
    pkgrel="$(echo ${1##*-} | sed 's/.t.z//')"
}

fn_write_metadata() {
    fn_get_metadata $1 $2
    mkdir -p $2/$DBPATH/installed/$pkgname
    echo pkgname="$pkgname" > $2/$DBPATH/installed/$pkgname/pkginfo
    echo pkgver="$pkgver" >> $2/$DBPATH/installed/$pkgname/pkginfo
    echo pkgrel="$pkgrel" >> $2/$DBPATH/installed/$pkgname/pkginfo
    # files
    tar -tvf $1 | awk '!/^d/ {print $NF}' | grep -v "install/" | sed 's/^/\//' > $2/$DBPATH/installed/$pkgname/files
}

fn_pkg_extract() {
    if [[ "$ARG" != "" && -f "$ARG" ]]; then
        printf "Extracting ${CYAN}%s${RESET}\n" "$ARG"
        tar -xf "$ARG"
    else
        printf "${RED}Extraction failed: File not found or invalid.${RESET}\n"
        exit 1
    fi
}

fn_pkg_extract_all() {
    for i in *.t?z; do
        [[ -e "$i" ]] || break
        ARG="$i"
        printf "Installing ${CYAN}%s${RESET} --target-root=./install\n" "$ARG"
        [ ! -d install ] && mkdir install
        tar -xf "$ARG" -C install
        if [ -f "install/install/doinst.sh" ]; then
            cd install && sh ./install/doinst.sh 2>/dev/null
            cd "$OLDPWD" || exit
        fi
        fn_write_metadata "$ARG" install
        if [ -d install/install ]; then
            rm -r install/install
        fi
    done
}

fn_pkg_install_local() {
    if [[ "$ARG" != "" && -f "$ARG" ]]; then
        printf "Installing ${CYAN}%s${RESET}\n" "$ARG"
        tar -xf "$ARG" -C /
        if [ -f "/install/doinst.sh" ]; then
            cd / && sh ./install/doinst.sh 2>/dev/null
            cd "$OLDPWD" || exit
        fi
        fn_write_metadata "$ARG" /
        if [ -d /install ]; then
            rm -r /install
        fi
        fn_pkg_post_actions
    else
        printf "${RED}Installation failed: File not found or invalid.${RESET}\n"
        exit 1
    fi
}

fn_pkg_post_actions() {
    ICONS=$(grep /usr/share/icons/hicolor         $DBPATH/installed/$pkgname/files)
    DESKTOP=$(grep /usr/share/applications        $DBPATH/installed/$pkgname/files)
    GSETTINGS=$(grep /usr/share/glib-2.0/schemas  $DBPATH/installed/$pkgname/files)
    FONTS=$(grep /usr/share/fonts/TTF             $DBPATH/installed/$pkgname/files)
    fn_pkg_post_actions_run
}

fn_pkg_post_actions_run() {
    if [ "$ICONS" ]; then gtk-update-icon-cache /usr/share/icons/hicolor; fi
    if [ "$DESKTOP" ]; then update-desktop-database; fi
    if [ "$GSETTINGS" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas; fi
    if [ "$FONTS" ]; then fc-cache -f -s; mkfontscale /usr/share/fonts/TTF; mkfontdir /usr/share/fonts/TTF; fi
}

fn_pkg_install() {
    for ONE in $ARGI; do
        if [ -f "$ONE" ]; then
            ARG="$ONE"
            fn_pkg_install_local
            exit 0
        fi
    done
    fn_check_pkgmatch_exists "$ARGI"
    for ONE in $ARGI; do
        ARG="$ONE"
        if [ -d "$DBPATH/installed/$ARG" ]; then
            printf "${RED}%s is already installed${RESET}\n" "$ARG" && exit 1
        fi
        PKGMATCH="$(fn_get_pkgmatch "$ARG")"
        if [ -f "$CACHEDIR/$(basename "$PKGMATCH")" ]; then
            ARG="$(basename "$PKGMATCH")"
            cd "$CACHEDIR" && fn_pkg_install_local && cd "$OLDPWD"
        else
            fn_pkg_download
            if [ -f "$CACHEDIR/$(basename "$PKGMATCH")" ]; then
                ARG="$(basename "$PKGMATCH")"
                cd "$CACHEDIR" && fn_pkg_install_local && cd "$OLDPWD"
            fi
        fi
    done
}

fn_pkg_remove() {
    for i in $ARGR; do
        if [ -d "$DBPATH/installed/$i" ]; then
            . "$DBPATH/installed/$i/pkginfo"
            printf "Removing ${CYAN}%s${RESET}" "$i"
            cat "$DBPATH/installed/$i/files" | while read -r file; do 
                if [ -f "$file" ]; then 
                    rm "$file"
                fi
            done
            rm -r "$DBPATH/installed/$i"
            echo
        else
            printf "${RED}%s is not installed${RESET}\n" "$ARGR"
        fi
    done
}

fn_pkg_clean_cache() {
    rm $CACHEDIR/* 2>/dev/null
}

fn_pkg_show_help() {
    printf "Usage: %s <command> [arguments]\n\n" "$(basename "$0")"
    printf "where ${CYAN}<command>${RESET} is one of:\n"
    printf "    ${GREEN}%-2s${RESET} ${YELLOW}%-42s${RESET} %s\n" "up:" "Update repository database"
    printf "    ${GREEN}%-2s${RESET} ${YELLOW}%-42s${RESET} %s\n" "sr:" "Search for packages"
    printf "    ${GREEN}%-2s${RESET} ${YELLOW}%-42s${RESET} %s\n" "dl:" "Download package(s)"
    printf "    ${GREEN}%-2s${RESET} ${YELLOW}%-42s${RESET} %s\n" "xp:" "Extract a single package (specify filename)"
    printf "    ${GREEN}%-2s${RESET} ${YELLOW}%-42s${RESET} %s\n" "xa:" "Extract all packages from the current directory"
    printf "    ${GREEN}%-2s${RESET} ${YELLOW}%-42s${RESET} %s\n" "it:" "Install package(s) (local or from a repository)"
    printf "    ${GREEN}%-2s${RESET} ${YELLOW}%-42s${RESET} %s\n" "rm:" "Uninstall package(s)"
    printf "    ${GREEN}%-2s${RESET} ${YELLOW}%-42s${RESET} %s\n\n" "cc:" "Delete cached packages"
}

# Arguments
case "$1" in
    up) fn_repo_update ;;
    sr) ARG="$2"; fn_pkg_search ;;
    dl) shift; ARGD="$@"; fn_pkg_download_all ;;
    xp) ARG="$2"; fn_pkg_extract ;;
    xa) fn_pkg_extract_all ;;
    it) shift; ARGI="$@"; fn_pkg_install ;;
    rm) shift; ARGR="$@"; fn_pkg_remove ;;
    cc) fn_pkg_clean_cache ;;
    *) fn_pkg_show_help ;;
esac
